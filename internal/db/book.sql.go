// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    title,
    isbn,
    description,
    price,
    author_id,
    published_date
) VALUES (
             $1, $2, $3, $4, $5, $6
         ) RETURNING id, title, isbn, description, price, author_id, published_date, created_at, updated_at
`

type CreateBookParams struct {
	Title         string
	Isbn          string
	Description   pgtype.Text
	Price         pgtype.Numeric
	AuthorID      int64
	PublishedDate pgtype.Date
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.Isbn,
		arg.Description,
		arg.Price,
		arg.AuthorID,
		arg.PublishedDate,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Isbn,
		&i.Description,
		&i.Price,
		&i.AuthorID,
		&i.PublishedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT
    b.id,
    b.title,
    b.isbn,
    b.description,
    b.price,
    b.published_date,
    b.created_at,
    b.updated_at,
    a.id as author_id,
    a.name as author_name,
    a.bio as author_bio,
    a.created_at as author_created_at,
    a.updated_at as author_updated_at
FROM books b
         JOIN authors a ON a.id = b.author_id
WHERE b.id = $1
`

type GetBookRow struct {
	ID              int64
	Title           string
	Isbn            string
	Description     pgtype.Text
	Price           pgtype.Numeric
	PublishedDate   pgtype.Date
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
	AuthorID        int64
	AuthorName      string
	AuthorBio       pgtype.Text
	AuthorCreatedAt pgtype.Timestamptz
	AuthorUpdatedAt pgtype.Timestamptz
}

func (q *Queries) GetBook(ctx context.Context, id int64) (GetBookRow, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i GetBookRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Isbn,
		&i.Description,
		&i.Price,
		&i.PublishedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorID,
		&i.AuthorName,
		&i.AuthorBio,
		&i.AuthorCreatedAt,
		&i.AuthorUpdatedAt,
	)
	return i, err
}

const getBookByISBN = `-- name: GetBookByISBN :one
SELECT id, title, isbn, description, price, author_id, published_date, created_at, updated_at FROM books
WHERE isbn = $1
`

func (q *Queries) GetBookByISBN(ctx context.Context, isbn string) (Book, error) {
	row := q.db.QueryRow(ctx, getBookByISBN, isbn)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Isbn,
		&i.Description,
		&i.Price,
		&i.AuthorID,
		&i.PublishedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT
    b.id,
    b.title,
    b.isbn,
    b.description,
    b.price,
    b.published_date,
    b.created_at,
    b.updated_at,
    a.id as author_id,
    a.name as author_name,
    a.bio as author_bio,
    a.created_at as author_created_at,
    a.updated_at as author_updated_at
FROM books b
         JOIN authors a ON a.id = b.author_id
ORDER BY b.created_at DESC
`

type ListBooksRow struct {
	ID              int64
	Title           string
	Isbn            string
	Description     pgtype.Text
	Price           pgtype.Numeric
	PublishedDate   pgtype.Date
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
	AuthorID        int64
	AuthorName      string
	AuthorBio       pgtype.Text
	AuthorCreatedAt pgtype.Timestamptz
	AuthorUpdatedAt pgtype.Timestamptz
}

func (q *Queries) ListBooks(ctx context.Context) ([]ListBooksRow, error) {
	rows, err := q.db.Query(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBooksRow
	for rows.Next() {
		var i ListBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Isbn,
			&i.Description,
			&i.Price,
			&i.PublishedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorID,
			&i.AuthorName,
			&i.AuthorBio,
			&i.AuthorCreatedAt,
			&i.AuthorUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    price = COALESCE($3, price),
    published_date = COALESCE($4, published_date),
    updated_at = NOW()
WHERE id = $5
RETURNING id, title, isbn, description, price, author_id, published_date, created_at, updated_at
`

type UpdateBookParams struct {
	Title         string
	Description   pgtype.Text
	Price         pgtype.Numeric
	PublishedDate pgtype.Date
	ID            int64
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.PublishedDate,
		arg.ID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Isbn,
		&i.Description,
		&i.Price,
		&i.AuthorID,
		&i.PublishedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
